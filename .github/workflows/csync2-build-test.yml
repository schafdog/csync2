name: Csync2 Build and Test

env:
  CACHE_PATHS: |
    src/csync2
    src/config.h
    src/config.h.in
    src/Makefile
    src/Makefile.in
    src/*.o
    src/.deps/
    src/stamp-h1
    config.status
    config.log
    configure
    configure.ac
    aclocal.m4
    Makefile
    Makefile.in
    test/Makefile
    test/Makefile.in
    missing
    compile
    install-sh
    depcomp
    ylwrap
    test-driver
    src/cfgfile_parser.cpp
    src/cfgfile_parser.hpp
    src/cfgfile_scanner.cpp
    .libs/

on:
  push:
    branches: [ main, master, feature/* ]
  pull_request:
    branches: [ main, master, feature/* ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Fix source file timestamps after checkout
      run: |
        echo "=== Fixing timestamps after git checkout ==="
        # Git checkout sets all files to current time, but we need source files
        # to appear older than any generated files we'll restore from cache
        
        # Set all source files to a time well in the past (1 hour ago)
        PAST_TIME=$(date -d '1 hour ago' '+%Y%m%d%H%M.%S' 2>/dev/null || date -v-1H '+%Y%m%d%H%M.%S')
        
        echo "Setting source files to: $PAST_TIME"
        find . -name "*.ac" -o -name "*.am" -o -name "*.in" | xargs touch -t "$PAST_TIME" 2>/dev/null || true
        
        echo "Timestamps fixed"

    - name: Calculate build cache key
      id: build-cache-key
      run: |
        # Create a hash of source files and build configuration
        echo "Calculating build cache key..."
        uname -a
        # Hash source files, headers, and build scripts
        # ./test/debug_source_hash.sh
        SOURCES_HASH=$(./test/source_hash.sh)
        echo "SOURCES_HASH $SOURCES_HASH"
        CONFIG_HASH=$(./test/config_hash.sh)
        echo "CONFIG_HASH $CONFIG_HASH"
        DEPS_HASH=$(./test/deps_hash.sh)
        echo "DEPS_HASH $DEPS_HASH"
        # Combine hashes
        CACHE_KEY=$(./test/combine_hash.sh ${{ matrix.os }} $SOURCES_HASH $CONFIG_HASH $DEPS_HASH)

        echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "🔑 Build cache key: ${CACHE_KEY}"

    - name: Restore build cache
      id: build-cache-restore
      uses: actions/cache@v4
      with:
        path: ${{ env.CACHE_PATHS }}
        key: ${{ steps.build-cache-key.outputs.cache-key }}

    - name: Install dependencies
      run: |
        if [ -f src/csync2 ] ; then
           echo "Skipping dependencies. Restored from cache"
           exit 0;
        fi
        if [ "${{ matrix.os }}" != "macOS" ] ; then
           sudo apt-get update
           if [ -f not ] ;  then
            sudo apt-get install  -y libmariadb3 libhiredis1.1.0 libpq5 librsync libgnutls30t64 
          else 
            sudo apt-get install -y \
              build-essential \
              autoconf \
              automake \
              pkg-config \
              bison \
              flex \
              libgnutls28-dev \
              libsqlite3-dev \
              libmariadb-dev \
              postgresql-client \
              libpq-dev \
              libhiredis-dev \
              libssl-dev \
              librsync-dev \
              redis-tools \
              mariadb-client
          fi
        fi

    - name: Build csync2 on ${{ matrix.os }}
      run: |
        echo "=== Building csync2 ==="
        env
        export PKG_CONFIG_PATH="/opt/homebrew/opt/libpq/lib/pkgconfig"
        if [ -f src/csync2 ] ; then
          echo "csync2 restored from cache" 
        else
          # Generate build system
          autoreconf -fiv
          # Configure with PostgreSQL support
          ./configure \
            --enable-release \
            --disable-debug \
            --enable-postgres \
            --enable-mysql \
            --enable-sqlite3 \
            --enable-redis
          
          # Build with enhanced warnings (silent mode for clean output)
          make -j$(nproc) V=1
        fi

    - name: Save build cache
      if: steps.cache-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{ env.CACHE_PATHS }}
        key: ${{ steps.build-cache-key.outputs.cache-key }}

  build-mac:
    runs-on: ${{ matrix.os }}-${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        os: [macOS]
        arch: [arm64, x86_64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Fix source file timestamps after checkout
      run: |

        # Git checkout sets all files to current time, but we need source files
        # to appear older than any generated files we'll restore from cache
        # Set all source files to a time well in the past (1 hour ago)
        PAST_TIME=$(date -d '1 hour ago' '+%Y%m%d%H%M.%S' 2>/dev/null || date -v-1H '+%Y%m%d%H%M.%S')
        echo "Setting source files to: $PAST_TIME"
        find . -name "*.ac" -o -name "*.am" -o -name "*.in" | xargs touch -t "$PAST_TIME" 2>/dev/null || true
        echo "Timestamps fixed"

    - name: Calculate build cache key
      id: build-cache-key
      run: |
        # Create a hash of source files and build configuration
        echo "Calculating build cache key..."
        uname -a
        # Hash source files, headers, and build scripts
        # ./test/debug_source_hash.sh
        SOURCES_HASH=$(./test/source_hash.sh)
        echo "SOURCES_HASH $SOURCES_HASH"
        CONFIG_HASH=$(./test/config_hash.sh)
        echo "CONFIG_HASH $CONFIG_HASH"
        DEPS_HASH=$(./test/deps_hash.sh)
        echo "DEPS_HASH $DEPS_HASH"
        # Combine hashes
        CACHE_KEY=$(./test/combine_hash.sh ${{ matrix.os }} $SOURCES_HASH $CONFIG_HASH $DEPS_HASH)

        echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "🔑 Build cache key: ${CACHE_KEY}"

    - name: Restore build cache
      id: build-cache-restore
      uses: actions/cache@v4
      with:
        path: ${{ env.CACHE_PATHS }}
        key: ${{ steps.build-cache-key.outputs.cache-key }}

    - name: Install dependencies
      run: |
        if [ -f src/csync2 ] ; then
           echo "Install runtime dependencies... Restored from cache"
           exit 0;
        fi

    - name: Build csync2 on ${{ matrix.os }}
      run: |
        echo "=== Building csync2 ==="
        env
        export PKG_CONFIG_PATH="/opt/homebrew/opt/libpq/lib/pkgconfig"
        if [ -f src/csync2 ] ; then
          echo "csync2 restored from cache"
        else
          # Generate build system
          autoreconf -fiv
          # Check for newer clang
          if [ -f /Users/dennis/.swiftly/bin/clang++ ] ; then
             CXX_OPT="CXX=/Users/dennis/.swiftly/bin/clang++
          fi
          # Configure with PostgreSQL support
          ./configure $CXX_OPT \
            --enable-release   \
            --disable-debug    \
            --enable-postgres  \
            --enable-mysql     \
            --enable-sqlite3   \
            --enable-redis

          # Build with enhanced warnings (silent mode for clean output)
          make -j$(nproc) V=1
        fi

    - name: Save build cache
      if: steps.cache-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{ env.CACHE_PATHS }}
        key: ${{ steps.build-cache-key.outputs.cache-key }}

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest ] # ubuntu-22.04,
        db: [sqlite, mysql, pgsql]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: csync238
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mariadb:
        image: mariadb:10.11
        env:
          MARIADB_ROOT_PASSWORD: csync238
          MARIADB_USER: csync2_notused
          MARIADB_PASSWORD: notused
          MARIADB_DATABASE: notused
        options: >-
          --health-cmd "healthcheck.sh --connect --innodb_initialized"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Fix source file timestamps after checkout
      run: |
        echo "=== Fixing timestamps after git checkout ==="
        # Set all source files to a time well in the past (1 hour ago)
        PAST_TIME=$(date -d '1 hour ago' '+%Y%m%d%H%M.%S' 2>/dev/null || date -v-1H '+%Y%m%d%H%M.%S')
        echo "Setting source files to: $PAST_TIME"
        find . -name "*.ac" -o -name "*.am" -o -name "*.in" | xargs touch -t "$PAST_TIME" 2>/dev/null || true

    - name: Setup host aliases for csync2 testing
      run: |
        echo "=== Setting up host aliases for csync2 ==="

        # Add csync2-specific host aliases to /etc/hosts
        sudo tee -a /etc/hosts << 'EOF'
        # csync2 test environment hosts
        127.0.0.1 local
        127.0.0.1 peer
        EOF

        # Test hostname resolution
        echo "Testing hostname resolution:"
        nslookup local || true
        ping -c 1 peer || true

    - name: Calculate build cache key
      id: test-cache-key
      run: |
        # Create a hash of source files and build configuration
        echo "Calculating build cache key..."
        
        # Hash source files, headers, and build scripts
        SOURCES_HASH=$(./test/source_hash.sh)
        echo "SOURCES_HASH $SOURCES_HASH"
        CONFIG_HASH=$(./test/config_hash.sh)
        echo "CONFIG_HASH $CONFIG_HASH"
        DEPS_HASH=$(./test/deps_hash.sh)
        echo "DEPS_HASH $DEPS_HASH"
        # Combine hashes
        CACHE_KEY=$(./test/combine_hash.sh ${{ matrix.os }} $SOURCES_HASH $CONFIG_HASH $DEPS_HASH)
        echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "🔑 Build cache key: ${CACHE_KEY}"

    - name: Restore build cache
      id: test-cache-restore
      uses: actions/cache@v4
      with:
        path: ${{ env.CACHE_PATHS }}
        key: ${{ steps.test-cache-key.outputs.cache-key }}

    - name: Verify cache restoration
      run: |
        ./test/verify_cache.sh "${{ steps.test-cache-restore.outputs.cache-hit }}" "${{ steps.test-cache-key.outputs.cache-key }}" "test job"

    - name: Debug timestamps after cache restore
      run: |
        echo "=== Checking file timestamps ==="
        echo "Current time: $(date)"
        echo
        
        echo "Source files (should be older than generated files):"
        ls -la --time-style=full-iso configure.ac aclocal.m4 2>/dev/null || true
        ls -la --time-style=full-iso Makefile.am test/Makefile.am src/Makefile.am 2>/dev/null || true  
        ls -la --time-style=full-iso src/config.h.in 2>/dev/null || true
        echo
        
        echo "Refresh time for cached files. Generated files (should be newer than source files):"
        ls -la --time-style=full-iso configure 2>/dev/null || true
        ls -la --time-style=full-iso config.status 2>/dev/null || true
        ls -la --time-style=full-iso Makefile test/Makefile src/Makefile 2>/dev/null || true
        ls -la --time-style=full-iso src/config.h 2>/dev/null || true
        ls -la --time-style=full-iso src/stamp-h1 2>/dev/null || true
        
    - name: Install dependencies
      run: |
       if [ "${{ matrix.os }}" != "macOS" ] ; then
          sudo apt-get update
          if [ -f not ] ;  then
            sudo apt-get install  -y libmariadb3 libhiredis1.1.0 libpq5 librsync libgnutls30t64 
          else 
            sudo apt-get install -y \
              build-essential \
              autoconf \
              automake \
              pkg-config \
              bison \
              flex \
              libgnutls28-dev \
              libsqlite3-dev \
              libmariadb-dev \
              postgresql-client \
              libpq-dev \
              libhiredis-dev \
              libssl-dev \
              librsync-dev \
              redis-tools \
              mariadb-client
          fi
        fi

    - name: Setup ${{ matrix.db }} for csync2 on ${{ matrix.os }}
      env:
        ROOT: root
        PASSWORD: csync238
      run: |
        ROOT=root
        if [ "${{ matrix.db }}" == "pgsql" ] ; then
           ROOT=postgres
        fi
        if [ -f ./test/create_${{ matrix.db }}.sh ] ; then
          echo "=== Setting up ${{ matrix.db }} for csync2 ==="
          ./test/create_${{ matrix.db }}.sh $ROOT $PASSWORD ${{ matrix.os }}
        fi
  
    - name: Verify ${{ matrix.db }} setup
      env:
        PGPASSWORD: csync238
      run: |
        if [ -f ./test/verify_${{ matrix.db }}.sh ] ; then
           echo "=== Verifying ${{ matrix.db }} setup ==="
           ./test/verify_${{ matrix.db }}.sh
        fi

    - name: Run basic functionality test
      env:
        PGPASSWORD: csync238
      run: |
        echo "=== Testing basic csync2 functionality ==="
        
        # Test csync2 binary
        ./src/csync2 -V | head -5
        
        # Test version
        ./src/csync2 -V

    - name: Test csync2 on ${{ matrix.os }} with ${{ matrix.db }} 
      env:
        PGPASSWORD: csync238
      run: |
        echo "=== Testing csync2 on ${{ matrix.os }} with ${{ matrix.db }} ==="
        
        cd test
        
        echo "🔄 Testing with database: ${{ matrix.db }} on ${{ matrix.os }}"
        
        # Set the database configuration
        ./set_database.sh "${{ matrix.db }}"
        
        # Verify the database configuration was set
        if [ -L database ]; then
          echo "✅ Database configuration set to: $(readlink database)"
        else
          echo "❌ Failed to set database configuration"
          continue
        fi
        
        # Run a simple test with this database
        echo "Running 'make check' with ${{ matrix.dn }}..."
        make test-only

    - name: Collect test artifacts on failure
      if: failure()
      run: |
        ./test/collect_failed_tests.sh

    - name: Upload test results on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.db }}
        path: test-artifacts/
        retention-days: 7

    - name: Send email notification on failure
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "❌ Csync2 Test Failed - ${{ matrix.os }}-${{ matrix.db }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: GitHub Actions <${{ secrets.SMTP_USERNAME }}>
        body: |
          Test failure detected in csync2 repository!
          
          **Details:**
          - Repository: ${{ github.repository }}
          - Branch: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}
          - OS: ${{ matrix.os }}
          - Database: ${{ matrix.db }}
          - Workflow: ${{ github.workflow }}
          - Run: ${{ github.run_number }}
          
          **View Details:**
          - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Download Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          **Test Logs:**
          Check the uploaded artifacts for detailed test logs and failure information.
        attachments: test/test-suite.log

  test-macos:
    needs: build
    runs-on: ${{ matrix.os }}-${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        os: [macOS]
        arch: [arm64, x86_64]
        db: [sqlite, mysql, pgsql]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Fix source file timestamps after checkout
      run: |
        echo "=== Fixing timestamps after git checkout ==="
        # Set all source files to a time well in the past (1 hour ago)
        PAST_TIME=$(date -d '1 hour ago' '+%Y%m%d%H%M.%S' 2>/dev/null || date -v-1H '+%Y%m%d%H%M.%S')
        echo "Setting source files to: $PAST_TIME"
        find . -name "*.ac" -o -name "*.am" -o -name "*.in" | xargs touch -t "$PAST_TIME" 2>/dev/null || true

    - name: Calculate build cache key
      id: test-cache-key-macos
      run: |
        # Create a hash of source files and build configuration
        echo "Calculating build cache key..."
        
        # Hash source files, headers, and build scripts
        bash -x ./test/source_hash.sh
        SOURCES_HASH=$(./test/source_hash.sh)
        echo "SOURCES_HASH $SOURCES_HASH"
        CONFIG_HASH=$(./test/config_hash.sh)
        echo "CONFIG_HASH $CONFIG_HASH"
        DEPS_HASH=$(./test/deps_hash.sh)
        echo "DEPS_HASH $DEPS_HASH"
        # Combine hashes
        CACHE_KEY=$(./test/combine_hash.sh ${{ matrix.os }} $SOURCES_HASH $CONFIG_HASH $DEPS_HASH)
        echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "🔑 Build cache key: ${CACHE_KEY}"

    - name: Debug cache key
      run: |
        echo "🔍 Debug: Retrieved cache key from step output: ${{ steps.test-cache-key.outputs.cache-key }}"

    - name: Restore build cache
      id: test-cache-restore
      uses: actions/cache@v4
      with:
        path: ${{ env.CACHE_PATHS }}
        key: ${{ steps.test-cache-key-macos.outputs.cache-key }}

    - name: Verify cache restoration
      run: |
        ./test/verify_cache.sh "${{ steps.test-cache-restore.outputs.cache-hit }}" "${{ steps.test-cache-key-macos.outputs.cache-key }}" "test-macos job"

    - name: Debug timestamps after cache restore (macOS)
      run: |
        echo "=== Checking file timestamps ==="
        echo "Current time: $(date)"
        echo
        
        echo "Source files (should be older than generated files):"
        ls -la configure.ac aclocal.m4 2>/dev/null || true
        ls -la Makefile.am test/Makefile.am src/Makefile.am 2>/dev/null || true  
        ls -la src/config.h.in 2>/dev/null || true
        echo
        
        echo "Generated files (should be newer than source files):"
        ls -la configure 2>/dev/null || true
        ls -la Makefile test/Makefile src/Makefile 2>/dev/null || true
        ls -la src/config.h config.status 2>/dev/null || true
        ls -la src/stamp-h1 2>/dev/null || true
        echo
        
        echo "Checking what make thinks needs rebuilding:"
        make -n | head -10 || true

    - name: Install dependencies
      run: |
        if [ -f ./test/install-run-time-dependencies.sh ] ; then
           ./test/install-run-time-dependencies.sh
        fi
    - name: Setup ${{ matrix.db }} for csync2 on ${{ matrix.os }}
      env:
        PGPASSWORD: csync238
      run: |
        if [ -f ./test/create_${{ matrix.db }}.sh ] ; then
          echo "=== Setting up ${{ matrix.db }} for csync2 ==="
          # Call without root/password. 
          ./test/create_${{ matrix.db }}.sh
        fi
  
    - name: Verify ${{ matrix.db }} setup
      env:
        PGPASSWORD: csync238
      run: |
        if [ -f ./test/verify_${{ matrix.db }}.sh ] ; then
           echo "=== Verifying ${{ matrix.db }} setup ==="
           ./test/verify_${{ matrix.db }}.sh
        fi

    - name: Run basic functionality test
      env:
        PGPASSWORD: csync238
      run: |
        echo "=== Testing basic csync2 functionality ==="
        
        # Test csync2 binary
        ./src/csync2 -V | head -5
        
        # Test version
        ./src/csync2 -V

    - name: Test csync2 on ${{ matrix.os }} with ${{ matrix.db }} 
      env:
        PGPASSWORD: csync238
      run: |
        echo "=== Testing csync2 on ${{ matrix.os }} with ${{ matrix.db }} ==="
        
        cd test
        
        echo "🔄 Testing with database: ${{ matrix.db }} on ${{ matrix.os }}"
        
        # Set the database configuration
        ./set_database.sh "${{ matrix.db }}"
        
        # Verify the database configuration was set
        if [ -L database ]; then
          echo "✅ Database configuration set to: $(readlink database)"
        else
          echo "❌ Failed to set database configuration"
          continue
        fi
        
        # Run a simple test with this database
        echo "Running basic functionality test with ${{ matrix.dn }}..."

        # No timeout on macOS
        make test-only

    - name: Collect test artifacts on failure
      if: failure()
      run: |
        echo "=== Collecting test artifacts ==="
        mkdir -p test-artifacts
        
        # Copy basic test files
        cp test/*.log test-artifacts/ 2>/dev/null || true
        cp test/*.trs test-artifacts/ 2>/dev/null || true
        cp test/test-suite.log test-artifacts/ 2>/dev/null || true
        
        # Find and copy all .log, .diff, and .res files from subdirectories
        find test -name "*.log" -type f -exec cp --parents {} test-artifacts/ \; 2>/dev/null || true
        find test -name "*.diff" -type f -exec cp --parents {} test-artifacts/ \; 2>/dev/null || true
        find test -name "*.res" -type f -exec cp --parents {} test-artifacts/ \; 2>/dev/null || true
        
        # Find directories containing .diff files and copy them entirely
        find test -name "*.diff" -type f -exec dirname {} \; | sort -u | while read dir; do
          echo "Found diff directory: $dir"
          mkdir -p "test-artifacts/$dir"
          cp -r "$dir"/* "test-artifacts/$dir/" 2>/dev/null || true
        done
        
        echo "Collected artifacts:"
        find test-artifacts -type f | head -20

    - name: Upload test results on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.db }}
        path: test-artifacts/
        retention-days: 7

    - name: Send email notification on failure
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "❌ Csync2 Test Failed - ${{ matrix.os }}-${{ matrix.db }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: GitHub Actions <${{ secrets.SMTP_USERNAME }}>
        body: |
          Test failure detected in csync2 repository!
          
          **Details:**
          - Repository: ${{ github.repository }}
          - Branch: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}
          - OS: ${{ matrix.os }}
          - Database: ${{ matrix.db }}
          - Workflow: ${{ github.workflow }}
          - Run: ${{ github.run_number }}
          
          **View Details:**
          - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Download Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          **Test Logs:**
          Check the uploaded artifacts for detailed test logs and failure information.
        attachments: test/test-suite.log

