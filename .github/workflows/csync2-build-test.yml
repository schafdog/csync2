name: Csync2 Build and Test

on:
  push:
    branches: [ main, master, feature/* ]
  pull_request:
    branches: [ main, master, feature/* ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS ] # ubuntu-22.04,
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Calculate build cache key
      id: build-cache-key
      run: |
        # Create a hash of source files and build configuration
        echo "Calculating build cache key..."
        
        # Hash source files, headers, and build scripts
        SOURCES_HASH=$(./test/source_hash.sh)
        echo "SOURCES_HASH $SOURCES_HASH"
        CONFIG_HASH=$(./test/config_hash.sh)
        echo "CONFIG_HASH $CONFIG_HASH"
        DEPS_HASH=$(./test/deps_hash.sh)
        echo "DEPS_HASH $DEPS_HASH"
        # Combine hashes
        CACHE_KEY=$(./test/combine_hash.sh ${{ matrix.os }} $SOURCES_HASH $CONFIG_HASH $DEPS_HASH)

        echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "üîë Build cache key: ${CACHE_KEY}"

    - name: Restore build cache
      id: build-cache-restore
      uses: actions/cache@v4
      with:
        path: |
          src/csync2
          csync2
          src/config.h
          config.status
          Makefile
          missing
          test/Makefile
          .deps/
          .libs/
        key: ${{ steps.build-cache-key.outputs.cache-key }}

    - name: Install dependencies
      run: |
       if [ "${{ matrix.os }}" != "macOS" ] ; then      
          sudo apt-get update
          if [ -f not ] ;  then
            sudo apt-get install  -y libmariadb3 libhiredis1.1.0 libpq5 librsync libgnutls30t64 
          else 
            sudo apt-get install -y \
              build-essential \
              autoconf \
              automake \
              pkg-config \
              bison \
              flex \
              libgnutls28-dev \
              libsqlite3-dev \
              libmariadb-dev \
              postgresql-client \
              libpq-dev \
              libhiredis-dev \
              libssl-dev \
              librsync-dev \
              redis-tools \
              mariadb-client
          fi
        fi

    - name: Build csync2 on ${{ matrix.os }}
      run: |
        echo "=== Building csync2 ==="
        
        if [ -f src/csync2 ] ; then
          echo "csync2 restored from cache" 
        else
          # Generate build system
          autoreconf -fiv
          # Configure with PostgreSQL support
          ./configure \
            --enable-release \
            --disable-debug \
            --enable-postgres \
            --enable-mysql \
            --enable-sqlite3 \
            --enable-redis
          
          # Build with enhanced warnings (silent mode for clean output)
          make -j$(nproc) V=1
        fi

    - name: Save build cache
      if: steps.cache-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          src/csync2
          csync2
          src/config.h
          config.status
          Makefile
          test/Makefile
          .deps/
          .libs/
        key: ${{ steps.build-cache-key.outputs.cache-key }}

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest ] # ubuntu-22.04,
        db: [sqlite, mysql, pgsql]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: csync238
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mariadb:
        image: mariadb:10.11
        env:
          MARIADB_ROOT_PASSWORD: csync238
          MARIADB_USER: csync2_notused
          MARIADB_PASSWORD: notused
          MARIADB_DATABASE: notused
        options: >-
          --health-cmd "healthcheck.sh --connect --innodb_initialized"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup host aliases for csync2 testing
      run: |
        echo "=== Setting up host aliases for csync2 ==="

        # Add csync2-specific host aliases to /etc/hosts
        sudo tee -a /etc/hosts << 'EOF'
        # csync2 test environment hosts
        127.0.0.1 local
        127.0.0.1 peer
        EOF

        # Test hostname resolution
        echo "Testing hostname resolution:"
        nslookup local || true
        ping -c 1 peer || true

    - name: Calculate build cache key
      id: test-cache-key
      run: |
        # Create a hash of source files and build configuration
        echo "Calculating build cache key..."
        
        # Hash source files, headers, and build scripts
        SOURCES_HASH=$(./test/source_hash.sh)
        echo "SOURCE_HASH $SOURCE_HASH"
        CONFIG_HASH=$(./test/config_hash.sh)
        echo "CONFIG_HASH $CONFIG_HASH"
        DEPS_HASH=$(./test/deps_hash.sh)
        echo "DEPS_HASH $DEPS_HASH"
        # Combine hashes
        CACHE_KEY=$(./test/combine_hash.sh ${{ matrix.os }} $SOURCES_HASH $CONFIG_HASH $DEPS_HASH)
        echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "üîë Build cache key: ${CACHE_KEY}"

    - name: Restore build cache
      id: test-cache-restore
      uses: actions/cache@v4
      with:
        path: |
          src/csync2
          csync2
          src/config.h
          config.status
          Makefile
          missing
          test/Makefile
          .deps/
          .libs/
        key: ${{ steps.test-cache-key.outputs.cache-key }}

    - name: Install dependencies
      run: |
       if [ "${{ matrix.os }}" != "macOS" ] ; then
          sudo apt-get update
          if [ -f not ] ;  then
            sudo apt-get install  -y libmariadb3 libhiredis1.1.0 libpq5 librsync libgnutls30t64 
          else 
            sudo apt-get install -y \
              build-essential \
              autoconf \
              automake \
              pkg-config \
              bison \
              flex \
              libgnutls28-dev \
              libsqlite3-dev \
              libmariadb-dev \
              postgresql-client \
              libpq-dev \
              libhiredis-dev \
              libssl-dev \
              librsync-dev \
              redis-tools \
              mariadb-client
          fi
        fi

    - name: Setup ${{ matrix.db }} for csync2 on ${{ matrix.os }}
      env:
        ROOT: root
        PASSWORD: csync238
      run: |
        ROOT=root
        if [ "${{ matrix.db }}" == "pgsql" ] ; then
           ROOT=postgres
        fi
        if [ -f ./test/create_${{ matrix.db }}.sh ] ; then
          echo "=== Setting up ${{ matrix.db }} for csync2 ==="
          ./test/create_${{ matrix.db }}.sh $ROOT $PASSWORD ${{ matrix.os }}
        fi
  
    - name: Verify ${{ matrix.db }} setup
      env:
        PGPASSWORD: csync238
      run: |
        if [ -f ./test/verify_${{ matrix.db }}.sh ] ; then
           echo "=== Verifying ${{ matrix.db }} setup ==="
           ./test/verify_${{ matrix.db }}.sh
        fi

    - name: Check warning count on ${{ matrix.os }}
      run: |
        echo "=== Checking compiler warnings ==="
        cd src
        
        # Count warnings
        WARNING_COUNT=$(make warnings-count 2>/dev/null || echo "0")
        echo "Total warnings: $WARNING_COUNT"
        
        # Show sample warnings
        echo "Sample warnings:"
        make warnings 2>/dev/null | head -10 || echo "No warnings to show"

    - name: Run basic functionality test
      env:
        PGPASSWORD: csync238
      run: |
        echo "=== Testing basic csync2 functionality ==="
        
        # Test csync2 binary
        ./src/csync2 -V | head -5
        
        # Test version
        ./src/csync2 -V

    - name: Test csync2 on ${{ matrix.os }} with ${{ matrix.db }} 
      env:
        PGPASSWORD: csync238
      run: |
        echo "=== Testing csync2 on ${{ matrix.os }} with ${{ matrix.db }} ==="
        
        cd test
        
        echo "üîÑ Testing with database: ${{ matrix.db }} on ${{ matrix.os }}"
        
        # Set the database configuration
        ./set_database.sh "${{ matrix.db }}"
        
        # Verify the database configuration was set
        if [ -L database ]; then
          echo "‚úÖ Database configuration set to: $(readlink database)"
        else
          echo "‚ùå Failed to set database configuration"
          continue
        fi
        
        # Run a simple test with this database
        echo "Running 'make check' with ${{ matrix.dn }}..."
        make check

  test-macos:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macOS ]
        db: [sqlite, mysql, pgsql]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Calculate build cache key
      id: test-cache-key-macos
      run: |
        # Create a hash of source files and build configuration
        echo "Calculating build cache key..."
        
        # Hash source files, headers, and build scripts
        SOURCES_HASH=$(./test/source_hash.sh)
        echo "SOURCE_HASH $SOURCE_HASH"
        CONFIG_HASH=$(./test/config_hash.sh)
        echo "CONFIG_HASH $CONFIG_HASH"
        DEPS_HASH=$(./test/deps_hash.sh)
        echo "DEPS_HASH $DEPS_HASH"
        # Combine hashes
        CACHE_KEY=$(./test/combine_hash.sh ${{ matrix.os }} $SOURCES_HASH $CONFIG_HASH $DEPS_HASH)
        echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "üîë Build cache key: ${CACHE_KEY}"

    - name: Debug cache key
      run: |
        echo "üîç Debug: Retrieved cache key from step output: ${{ steps.test-cache-key.outputs.cache-key }}"

    - name: Restore build cache
      id: test-cache-restore
      uses: actions/cache@v4
      with:
        path: |
          src/csync2
          csync2
          src/config.h
          config.status
          Makefile
          missing
          test/Makefile
          .deps/
          .libs/
        key: ${{ steps.test-cache-key-macos.outputs.cache-key }}

    - name: Install dependencies
      run: |
        if [ -f ./test/install-run-time-dependencies.sh ] ; then
           ./test/install-run-time-dependencies.sh
        fi
    - name: Setup ${{ matrix.db }} for csync2 on ${{ matrix.os }}
      env:
        PGPASSWORD: csync238
      run: |
        if [ -f ./test/create_${{ matrix.db }}.sh ] ; then
          echo "=== Setting up ${{ matrix.db }} for csync2 ==="
          # Call without root/password. 
          ./test/create_${{ matrix.db }}.sh
        fi
  
    - name: Verify ${{ matrix.db }} setup
      env:
        PGPASSWORD: csync238
      run: |
        if [ -f ./test/verify_${{ matrix.db }}.sh ] ; then
           echo "=== Verifying ${{ matrix.db }} setup ==="
           ./test/verify_${{ matrix.db }}.sh
        fi

    - name: Check warning count on ${{ matrix.os }}
      run: |
        echo "=== Checking compiler warnings ==="
        cd src
        
        # Count warnings
        WARNING_COUNT=$(make warnings-count 2>/dev/null || echo "0")
        echo "Total warnings: $WARNING_COUNT"
        
        # Show sample warnings
        echo "Sample warnings:"
        make warnings 2>/dev/null | head -10 || echo "No warnings to show"

    - name: Run basic functionality test
      env:
        PGPASSWORD: csync238
      run: |
        echo "=== Testing basic csync2 functionality ==="
        
        # Test csync2 binary
        ./src/csync2 -V | head -5
        
        # Test version
        ./src/csync2 -V

    - name: Test csync2 on ${{ matrix.os }} with ${{ matrix.db }} 
      env:
        PGPASSWORD: csync238
      run: |
        echo "=== Testing csync2 on ${{ matrix.os }} with ${{ matrix.db }} ==="
        
        cd test
        
        echo "üîÑ Testing with database: ${{ matrix.db }} on ${{ matrix.os }}"
        
        # Set the database configuration
        ./set_database.sh "${{ matrix.db }}"
        
        # Verify the database configuration was set
        if [ -L database ]; then
          echo "‚úÖ Database configuration set to: $(readlink database)"
        else
          echo "‚ùå Failed to set database configuration"
          continue
        fi
        
        # Run a simple test with this database
        echo "Running basic functionality test with ${{ matrix.dn }}..."

        # No timeout on macOS
        make check

