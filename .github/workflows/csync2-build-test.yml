name: Csync2 Build and Test

on:
  push:
    branches: [ main, master, feature/* ]
  pull_request:
    branches: [ main, master, feature/* ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Calculate build cache key
      id: cache-key
      run: |
        # Create a hash of source files and build configuration
        echo "Calculating build cache key..."
        
        # Hash source files, headers, and build scripts
        SOURCES_HASH=$(find src/ -name "*.c" -o -name "*.h" -o -name "*.cpp" -o -name "*.hpp" | sort | xargs cat | sha256sum | cut -d' ' -f1)
        CONFIG_HASH=$(cat configure.ac Makefile.am | sha256sum | cut -d' ' -f1)
        DEPS_HASH=$(echo "libgnutls28-dev libsqlite3-dev libmariadb-dev libpq-dev libhiredis-dev libssl-dev librsync-dev" | sha256sum | cut -d' ' -f1)
        
        # Combine hashes
        CACHE_KEY="build-$(echo "${SOURCES_HASH}-${CONFIG_HASH}-${DEPS_HASH}" | sha256sum | cut -d' ' -f1 | head -c 16)"
        
        echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "🔑 Build cache key: ${CACHE_KEY}"

    - name: Restore build cache
      id: cache-restore
      uses: actions/cache@v4
      with:
        path: |
          src/csync2
          csync2
          config.h
          Makefile
          .deps/
          .libs/
        key: ${{ steps.cache-key.outputs.cache-key }}
        restore-keys: |
          build-

    - name: Install build dependencies
      if: steps.cache-restore.outputs.cache-hit != 'true'
      run: |
        echo "💾 Cache miss - installing build dependencies and building..."
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          autoconf \
          automake \
          pkg-config \
          bison \
          flex \
          libgnutls28-dev \
          libsqlite3-dev \
          libmariadb-dev \
          libpq-dev \
          libhiredis-dev \
          libssl-dev \
          librsync-dev

    - name: Build csync2
      if: steps.cache-restore.outputs.cache-hit != 'true'
      run: |
        echo "=== Building csync2 ==="
        
        # Generate build system
        autoreconf -fiv
        
        # Configure with all database support
        ./configure \
          --enable-postgres \
          --enable-mysql \
          --enable-sqlite3 \
          --enable-redis \
          --with-libpq-includes=/usr/include/postgresql \
          --with-libpq-libs=/usr/lib/x86_64-linux-gnu
        
        # Build with enhanced warnings
        make -j$(nproc)
        
        # Verify build succeeded
        test -f src/csync2 || (echo "Build failed - csync2 binary not found" && exit 1)
        echo "✅ Build completed successfully"

    - name: Verify cached or built binary
      run: |
        if [ "${{ steps.cache-restore.outputs.cache-hit }}" == "true" ]; then
          echo "✅ Using cached build"
        else
          echo "✅ Fresh build completed"
        fi
        
        # Verify binary exists and is executable
        test -f src/csync2 || (echo "❌ csync2 binary not found" && exit 1)
        chmod +x src/csync2
        ./src/csync2 -V || echo "⚠️  Version check failed"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: csync2-build
        path: |
          src/csync2
          test/
          sql/
          configure
          Makefile
          config.h
        retention-days: 1

    - name: Check warning count
      if: steps.cache-restore.outputs.cache-hit != 'true'
      run: |
        echo "=== Checking compiler warnings ==="
        cd src
        
        # Count warnings
        WARNING_COUNT=$(make warnings-count 2>/dev/null || echo "0")
        echo "Total warnings: $WARNING_COUNT"
        
        # Show sample warnings
        echo "Sample warnings:"
        make warnings 2>/dev/null | head -10 || echo "No warnings to show"


    - name: Run basic functionality test
      env:
        PGPASSWORD: csync238
      run: |
        echo "=== Testing basic csync2 functionality ==="
        
        # Test csync2 binary
        ./src/csync2 -V | head -5
        
        # Test version
        ./src/csync2 -V

    - name: Run csync2 tests (if available)
      env:
        PGPASSWORD: csync238
      run: |
        echo "=== Running csync2 tests ==="
        
        if [ -d test ] && [ -f test/local.sh ]; then
          cd test
          ./set_database pgsql
          # Kill any existing processes
          pkill -f csync2 || true
          sleep 2
          
          # Run a simple test
          if [ -f "simple.test ]; then
            echo "Running simple test..."
            timeout 120 make check || (echo "Test completed with status $?" && cat test-suite.log && exit 1) 
          else
            echo "No simple.test found"
          fi
        else
          echo "No test directory found, skipping tests"
        fi
        "
	
    - name: Database cleanup test
      env:
        PGPASSWORD: csync238
      run: |
        echo "=== Testing database cleanup ==="
        
        # Test database cleanup
        PGPASSWORD=csync238 psql -U csync2 -h localhost -d csync2_local -c "
          -- Show table sizes before cleanup
          SELECT schemaname, tablename, 
                 pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size
          FROM pg_tables 
          WHERE schemaname = 'public';
        "
    - name: Save build cache
      if: steps.cache-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          src/csync2
          csync2
          config.h
          Makefile
          .deps/
          .libs/
        key: ${{ steps.cache-key.outputs.cache-key }}


  test-multiple-ubuntu:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] # ubuntu-22.04,
        db: [sqlite, mysql, pgsql]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: csync238
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mariadb:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: csync238
          MYSQL_USER: csync2
          MYSQL_PASSWORD: csync238
          MYSQL_DATABASE: csync2_test
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 3306:3306

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: csync2-build
        path: .

    - name: Make csync2 executable
      run: |
        chmod +x src/csync2
        echo "✅ csync2 binary is executable"

    - name: Test on ${{ matrix.os }} with ${{ matrix.db }}
      continue-on-error: true
      env:
        PGPASSWORD: csync238
        MYSQLPASSWORD: csync238
        DB_HOST: 127.0.0.1

      run: |
        echo "=== Testing on ${{ matrix.os }} with database ${{ matrix.db }} ==="
        
        # Install minimal dependencies and runtime libraries
        sudo apt-get update
        sudo apt-get install -y \
          postgresql-client \
          redis-tools \
          mysql-client \
          netcat-openbsd \
          libgnutls30 \
          libsqlite3-0 \
          libmariadb3 \
          libpq5 \
          libhiredis-dev \
          libssl3 \
          librsync2

        # Create symbolic links for missing library names that csync2 might expect
        echo "🔗 Creating library symbolic links..."
        
        # Find libmariadb.so and create libmariadbclient.so symlink if needed
        if [ -f /usr/lib/x86_64-linux-gnu/libmariadb.so.3 ]; then
          sudo ln -sf /usr/lib/x86_64-linux-gnu/libmariadb.so.3 /usr/lib/x86_64-linux-gnu/libmariadbclient.so || true
          sudo ln -sf /usr/lib/x86_64-linux-gnu/libmariadb.so.3 /usr/lib/x86_64-linux-gnu/libmariadbclient.so.18 || true
          echo "  ✅ Created libmariadbclient.so -> libmariadb.so.3"
        fi
        
        # Also check for libmysqlclient and create alternative symlinks
        if [ -f /usr/lib/x86_64-linux-gnu/libmysqlclient.so.21 ]; then
          sudo ln -sf /usr/lib/x86_64-linux-gnu/libmysqlclient.so.21 /usr/lib/x86_64-linux-gnu/libmariadbclient.so || true
          echo "  ✅ Created libmariadbclient.so -> libmysqlclient.so.21"
        elif [ -f /usr/lib/x86_64-linux-gnu/libmysqlclient.so.20 ]; then
          sudo ln -sf /usr/lib/x86_64-linux-gnu/libmysqlclient.so.20 /usr/lib/x86_64-linux-gnu/libmariadbclient.so || true
          echo "  ✅ Created libmariadbclient.so -> libmysqlclient.so.20"
        fi
        
        # Update ldconfig cache
        sudo ldconfig || true
        echo "  ✅ Updated library cache"

        # Verify csync2 binary and dependencies
        echo "🔍 Verifying csync2 binary and shared library dependencies..."
        chmod +x src/csync2
        ldd src/csync2 || echo "⚠️  Could not check shared libraries"
        ./src/csync2 -V || echo "⚠️  csync2 version check failed"

        # Set up database configuration
        cd test
        echo "🔄 Setting database configuration to ${{ matrix.db }}"
        ./set_database.sh "${{ matrix.db }}"
        
        # Verify database configuration
        if [ -L database ]; then
          echo "✅ Database configuration set to: $(readlink database)"
        else
          echo "❌ Failed to set database configuration"
          echo "⚠️  Continuing with default database configuration..."
        fi

        # Test database connections and setup
        if [ "${{ matrix.db }}" = "pgsql" ]; then
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
          # Setup PostgreSQL for testing
          PGPASSWORD=csync238 psql -h localhost -U postgres -c "CREATE USER csync2_local WITH PASSWORD 'csync_local';" || true
          PGPASSWORD=csync238 psql -h localhost -U postgres -c "CREATE DATABASE csync2_local OWNER csync2_local;" || true
          PGPASSWORD=csync238 psql -h localhost -U postgres -c "CREATE USER csync2_peer WITH PASSWORD 'csync_peer';" || true
          PGPASSWORD=csync238 psql -h localhost -U postgres -c "CREATE DATABASE csync2_peer OWNER csync2_peer;" || true
          
          echo "PostgreSQL setup successful"
        fi

        if [ "${{ matrix.db }}" = "mysql" ]; then
          retries=20
          until mysql --protocol=TCP -h 127.0.0.1 -u root -pcsync238 -e "SELECT 1;" 2>/dev/null; do
            echo "Waiting for MariaDB... ($retries retries left)"
            sleep 2
            retries=$((retries - 1))
            if [ $retries -eq 0 ] ; then
               echo "❌ Giving up on mysql after 20 seconds - skipping MySQL tests"
               echo "📊 Test Results for ${{ matrix.db }}:"
               echo "❌ Tests skipped: Database connection failed"
               exit 0
            fi
          done
          
          # Setup MariaDB for testing
          mysql --protocol=TCP -h 127.0.0.1 -u root -pcsync238 -e "CREATE DATABASE IF NOT EXISTS csync2_local;"
          mysql --protocol=TCP -h 127.0.0.1 -u root -pcsync238 -e "CREATE DATABASE IF NOT EXISTS csync2_peer;"
          mysql --protocol=TCP -h 127.0.0.1 -u root -pcsync238 -e "GRANT ALL PRIVILEGES ON csync2_local.* TO 'csync2_local'@'%' identified by 'csync2_local'; " || true
          mysql --protocol=TCP -h 127.0.0.1 -u root -pcsync238 -e "GRANT ALL PRIVILEGES ON csync2_peer.* TO 'csync2_peer'@'%' identified by 'csync2_peer'; flush privileges;" || true
          echo "MariaDB setup successful"
        fi

        # Test Redis connection (used by all database types)
        until redis-cli -h localhost -p 6379 ping; do
          echo "Waiting for Redis..."
          sleep 2
        done

        # Run basic csync2 test with configured database
        echo "🧪 Testing csync2 with ${{ matrix.db }}..."
        # Run tests if available
        # Initialize test counters
        TOTAL_TESTS=0
        ERROR_COUNT=0
              
          echo "📋 Running all *.test files..."

        # Run each test file
        for test_file in younger_auto_resolve.test; do
          if [ -f "$test_file" ]; then
            TOTAL_TESTS=$((TOTAL_TESTS + 1))
            test_script="${test_file/.test/.sh}"
                  
             echo "  🔄 Running test: $test_file (script: $test_script)"
                  
             if [ -f "$test_script" ]; then
               # Run test with timeout
               if timeout 120 bash -x ./"$test_script"  ; then
                 echo "    ✅ PASS: $test_file"
               else
                 exit_code=$?
                 ERROR_COUNT=$((ERROR_COUNT + 1))
                 echo "    ❌ FAIL: $test_file (exit code: $exit_code)"
               fi
             else
               ERROR_COUNT=$((ERROR_COUNT + 1))
               echo "    ❌ FAIL: $test_file (script $test_script not found)"
             fi
                  
             # Brief pause between tests
             sleep 1
          fi
        done
              
        echo "📊 Test Results for $db:"
        if [ $ERROR_COUNT -eq 0 ]; then
          echo "✅ All tests passed: $ERROR_COUNT errors / $TOTAL_TESTS tests"
        else
          echo "❌ Tests failed: $ERROR_COUNT errors / $TOTAL_TESTS tests"
        fi
        echo ""
        echo "✅ Test completed successfully on ${{ matrix.os }} with ${{ matrix.db }}"
