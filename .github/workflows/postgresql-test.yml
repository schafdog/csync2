name: PostgreSQL Test Workflow

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  test-postgresql:
    runs-on: ubuntu-latest
    
    # PostgreSQL service container
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready!"

    - name: Test basic connection
      env:
        PGPASSWORD: postgres
      run: |
        echo "=== Testing basic connection ==="
        psql -h localhost -U postgres -d testdb -c "SELECT version();"

    - name: Create test user and database
      env:
        PGPASSWORD: postgres
      run: |
        echo "=== Creating test user and database ==="
        
        # Create a test user
        psql -h localhost -U postgres -d testdb -c "
          CREATE USER testuser WITH PASSWORD 'testpass';
          ALTER USER testuser CREATEDB;
        "
        
        # Create a test database
        psql -h localhost -U postgres -c "
          CREATE DATABASE csync2_test OWNER testuser;
          GRANT ALL PRIVILEGES ON DATABASE csync2_test TO testuser;
        "

    - name: Test connection with test user
      env:
        PGPASSWORD: testpass
      run: |
        echo "=== Testing connection with test user ==="
        psql -h localhost -U testuser -d csync2_test -c "
          SELECT current_user, current_database();
        "

    - name: Create and populate test tables
      env:
        PGPASSWORD: testpass
      run: |
        echo "=== Creating test tables ==="
        psql -h localhost -U testuser -d csync2_test -c "
          CREATE TABLE IF NOT EXISTS test_files (
            id SERIAL PRIMARY KEY,
            filename VARCHAR(255) NOT NULL,
            checksum VARCHAR(64),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          
          INSERT INTO test_files (filename, checksum) VALUES
            ('file1.txt', 'abc123'),
            ('file2.txt', 'def456'),
            ('.hidden', 'ghi789');
          
          SELECT * FROM test_files ORDER BY filename;
        "

    - name: Test collation behavior
      env:
        PGPASSWORD: testpass
      run: |
        echo "=== Testing collation behavior ==="
        psql -h localhost -U testuser -d csync2_test -c "
          -- Show current database collation
          SELECT datname, datcollate, datctype 
          FROM pg_database 
          WHERE datname = 'csync2_test';
          
          -- Test sorting with different collations
          SELECT filename FROM test_files ORDER BY filename COLLATE \"C\" DESC;
        "

    - name: Test connection methods
      env:
        PGPASSWORD: testpass
      run: |
        echo "=== Testing different connection methods ==="
        
        # Method 1: Command line parameters
        echo "Method 1: Command line parameters"
        psql -h localhost -p 5432 -U testuser -d csync2_test -c "SELECT 'Method 1: CLI params' as connection_method;"
        
        # Method 2: Connection string
        echo "Method 2: Connection string"
        psql "postgresql://testuser:testpass@localhost:5432/csync2_test" -c "SELECT 'Method 2: Connection string' as connection_method;"
        
        # Method 3: Environment variables
        echo "Method 3: Environment variables"
        export PGHOST=localhost
        export PGPORT=5432
        export PGUSER=testuser
        export PGDATABASE=csync2_test
        psql -c "SELECT 'Method 3: Environment vars' as connection_method;"

    - name: Test SQL script execution
      env:
        PGPASSWORD: testpass
      run: |
        echo "=== Testing SQL script execution ==="
        
        # Create a test SQL script
        cat > test_script.sql << 'EOF'
        -- Test SQL script
        \echo 'Executing test script...'
        
        CREATE TABLE IF NOT EXISTS script_test (
          id SERIAL PRIMARY KEY,
          message TEXT,
          executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        INSERT INTO script_test (message) VALUES ('Script executed successfully');
        
        SELECT 'Script execution completed' as status, count(*) as records 
        FROM script_test;
        EOF
        
        # Execute the script
        psql -h localhost -U testuser -d csync2_test -f test_script.sql

    - name: Test database backup and restore
      env:
        PGPASSWORD: testpass
      run: |
        echo "=== Testing backup and restore ==="
        
        # Create backup
        pg_dump -h localhost -U testuser -d csync2_test > backup.sql
        echo "Backup created, size: $(wc -l < backup.sql) lines"
        
        # Show first few lines of backup
        echo "Backup preview:"
        head -20 backup.sql

    - name: Performance and monitoring tests
      env:
        PGPASSWORD: postgres
      run: |
        echo "=== Performance and monitoring tests ==="
        
        # Check PostgreSQL configuration
        psql -h localhost -U postgres -d testdb -c "
          SELECT name, setting, unit, context 
          FROM pg_settings 
          WHERE name IN ('max_connections', 'shared_buffers', 'work_mem')
          ORDER BY name;
        "
        
        # Check active connections
        psql -h localhost -U postgres -d testdb -c "
          SELECT datname, usename, client_addr, state, query_start
          FROM pg_stat_activity 
          WHERE datname IS NOT NULL;
        "

    - name: Cleanup test
      env:
        PGPASSWORD: postgres
      run: |
        echo "=== Cleanup test ==="
        
        # Drop test database
        psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS csync2_test;"
        
        # Drop test user
        psql -h localhost -U postgres -c "DROP USER IF EXISTS testuser;"
        
        echo "Cleanup completed"

  test-multiple-postgres-versions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        postgres-version: [12, 13, 14, 15, 16]
    
    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Test PostgreSQL version
      env:
        PGPASSWORD: postgres
      run: |
        echo "=== Testing PostgreSQL ${{ matrix.postgres-version }} ==="
        psql -h localhost -U postgres -d testdb -c "SELECT version();"
        
        # Test version-specific features
        psql -h localhost -U postgres -d testdb -c "
          SELECT 
            current_setting('server_version') as version,
            current_setting('server_version_num') as version_num;
        "
